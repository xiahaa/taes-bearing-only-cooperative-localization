import unittest

class TestBGPNP(unittest.TestCase):
    def test_bgpnp(self):
        from bearing_only_solver import bgpnp
        import numpy as np

        # Test case 1
        p1 = np.array([[7.922073295595544, 0.357116785741896, 6.787351548577734, 3.922270195341682, 7.060460880196088, 0.461713906311539],
              [9.594924263929030, 8.491293058687772, 7.577401305783335, 6.554778901775567, 0.318328463774207, 0.971317812358475],
              [6.557406991565868, 9.339932477575505, 7.431324681249162, 1.711866878115618, 2.769229849608900, 8.234578283272926]]).T

        bearing = np.array([[0.917193663829810, 0.753729094278495, 0.075854289563064, 0.779167230102011, 0.568823660872193, 0.337122644398882],
                      [0.285839018820374, 0.380445846975357, 0.053950118666607, 0.934010684229183, 0.469390641058206, 0.162182308193243],
                      [0.757200229110721, 0.567821640725221, 0.530797553008973, 0.129906208473730, 0.011902069501241, 0.794284540683907]]).T

        p2 = np.array([[0.547215529963803, 0.257508254123736, 0.814284826068816, 0.349983765984809, 0.616044676146639, 0.830828627896291],
                      [0.138624442828679, 0.840717255983663, 0.243524968724989, 0.196595250431208, 0.473288848902729, 0.585264091152724],
                      [0.149294005559057, 0.254282178971531, 0.929263623187228, 0.251083857976031, 0.351659507062997, 0.549723608291140]]).T

        Alph_exp = np.array([[7.922073295595544, 9.594924263929030, 6.557406991565868, -23.074404551090442],
                 [0.357116785741896, 8.491293058687772, 9.339932477575505, -17.188342322005173],
                 [6.787351548577734, 7.577401305783335, 7.431324681249162, -20.796077535610230],
                 [3.922270195341682, 6.554778901775567, 1.711866878115618, -11.188915975232867],
                 [7.060460880196088, 0.318328463774207, 2.769229849608900, -9.148019193579195],
                 [0.461713906311539, 0.971317812358475, 8.234578283272926, -8.667610001942940]])

        Cw = bgpnp.define_control_points()
        Alph = bgpnp.compute_alphas(p1, Cw)

        self.assertTrue(np.allclose(Alph, Alph_exp, atol=1e-8))

        M_exp = np.array([[0, -5.99859571445687, 2.26443765783611, 0, -7.26527885094708, 2.74260373725727, 0, -4.96527007638592, 1.87436278047505, 0, 17.4719444126792, -6.59556515674805],
                        [5.99859571445687, 0, -7.26607543111557, 7.26527885094708, 0, -8.80040373980261, 4.96527007638592, 0, -6.01441214381751, -17.4719444126792, 0, 21.1636976509059],
                        [-2.26443765783611, 7.26607543111557, 0, -2.74260373725727, 8.80040373980261, 0, -1.87436278047505, 6.01441214381751, 0, 6.59556515674805, -21.1636976509059, 0],
                        [0, -0.202778639210480, 0.135863598020692, 0, -4.82153995646277, 3.23047717962844, 0, -5.30341578367970, 3.55333852212385, 0, 9.75991273862774, -6.53923345279763],
                        [0.202778639210480, 0, -0.269169311468886, 4.82153995646277, 0, -6.40013462637801, 5.30341578367970, 0, -7.03977884694529, -9.75991273862774, 0, 12.9553536905137],
                        [-0.135863598020692, 0.269169311468886, 0, -3.23047717962844, 6.40013462637801, 0, -3.55333852212385, 7.03977884694529, 0, 6.53923345279763, -12.9553536905137, 0],
                        [0, -3.60270959339672, 0.366178421477749, 0, -4.02206607127679, 0.408801699631515, 0, -3.94452895642224, 0.400920848403479, 0, 11.0385070680868, -1.12195085084614],
                        [3.60270959339672, 0, -0.514849729732124, 4.02206607127679, 0, -0.574778392784425, 3.94452895642224, 0, -0.563697854208615, -11.0385070680868, 0, 1.57747168716210],
                        [-0.366178421477749, 0.514849729732124, 0, -0.408801699631515, 0.574778392784425, 0, -0.400920848403479, 0.563697854208615, 0, 1.12195085084614, -1.57747168716210, 0],
                        [0, -0.509527249686355, 3.66344226888282, 0, -0.851506474513265, 6.12223352701841, 0, -0.222382135547761, 1.59890195413804, 0, 1.45350965127365, -10.4505670658101],
                        [0.509527249686355, 0, -3.05610440381605, 0.851506474513265, 0, -5.10726892082757, 0.222382135547761, 0, -1.33383057372472, -1.45350965127365, 0, 8.71803666826634],
                        [-3.66344226888282, 3.05610440381605, 0, -6.12223352701841, 5.10726892082757, 0, -1.59890195413804, 1.33383057372472, 0, 10.4505670658101, -8.71803666826634, 0],
                        [0, -0.0840340961068899, 3.31411425872163, 0, -0.00378876750006401, 0.149420401678049, 0, -0.0329595661349574, 1.29985057434544, 0, 0.108880360240670, -4.29399459368691],
                        [0.0840340961068899, 0, -4.01615720531804, 0.00378876750006401, 0, -0.181072762123865, 0.0329595661349574, 0, -1.57520346085109, -0.108880360240670, 0, 5.20360976742080],
                        [-3.31411425872163, 4.01615720531804, 0, -0.149420401678049, 0.181072762123865, 0, -1.29985057434544, 1.57520346085109, 0, 4.29399459368691, -5.20360976742080, 0],
                        [0, -0.366732218002034, 0.0748818270505241, 0, -0.771502722447249, 0.157530564797509, 0, -6.54059822945511, 1.33550291297915, 0, 6.88454862922049, -1.40573299663394],
                        [0.366732218002034, 0, -0.155654213051484, 0.771502722447249, 0, -0.327453229454026, 6.54059822945511, 0, -2.77606280636657, -6.88454862922049, 0, 2.92204760447320],
                        [-0.0748818270505241, 0.155654213051484, 0, -0.157530564797509, 0.327453229454026, 0, -1.33550291297915, 2.77606280636657, 0, 1.40573299663394, -2.92204760447320, 0]])

        b_exp = np.array([-0.0622924078054575,
                         0.277420208714997,
                         -0.0292700895537219,
                         -0.380636852729086,
                         -0.0454411170905471,
                         0.535705110053618,
                         -0.0791285747522987,
                         0.361731761175999,
                         -0.0254583495013289,
                         0.208976062399634,
                         -0.150171250076067,
                         -0.173708000006882,
                         0.159432564680710,
                         -0.192700041636717,
                         -0.0199477097741292,
                         -0.375710776159051,
                         0.474590058580042,
                         0.0625600734958692])

        M, b = bgpnp.compute_Mb(bearing, Alph, p2)

        self.assertTrue(np.allclose(M, M_exp, atol=1e-8))
        self.assertTrue(np.allclose(b, b_exp, atol=1e-8))

        Cw_exp = np.array([[1, 0, 0, 0],
                      [0, 1, 0, 0],
                      [0, 0, 1, 0]]).T

        M, b, Alph, Cw = bgpnp.prepare_data(p1, bearing, p2)

        self.assertTrue(np.allclose(M, M_exp, atol=1e-8))
        self.assertTrue(np.allclose(b, b_exp, atol=1e-8))
        self.assertTrue(np.allclose(Alph, Alph_exp, atol=1e-8))
        self.assertTrue(np.allclose(Cw, Cw_exp, atol=1e-8))

        K_exp = np.array([[-0.502128662527832, -0.00761058047813126, 0.328980489262086, -0.163909011133070],
                 [0.204333672402349, -0.0956200980484484, 0.399438734855135, -0.0406734578653991],
                 [0.0130532537188014, 0.406449942133586, -0.0320363398039213, 1.29409125909179],
                 [-0.263488064416706, 0.170887480074568, 0.312194952092063, 0.526176157273177],
                 [0.397035749283211, 0.0156285977280821, 0.405856308213908, 0.510786296471738],
                 [0.0692541415396267, 0.457349555025995, -0.0363372772918987, 1.48588865245834],
                 [-0.317545955379908, 0.158514047080463, 0.269465197218176, 0.505452793202259],
                 [0.294193868659194, -0.00506312840297153, 0.352148274851246, 0.418413757805455],
                 [0.167691429638824, 0.551040420137910, -0.0640247190947409, 1.87276300471188],
                 [-0.393054273083579, 0.119657715780114, 0.317316219194961, 0.279256073976895],
                 [0.316017348419923, -0.0253973993460821, 0.405171984503371, 0.310337587274863],
                 [0.0649629043213577, 0.493174453111536, -0.0459977643599648, 1.58527202732892]])

        # this is a bit tricky, because the SVD function is not deterministic
        K = bgpnp.kernel_noise(M, b)
        self.assertTrue(np.allclose(K[:,-1], K_exp[:,-1], atol=1e-8))

        R_exp = np.array([
            [-0.604060934331712, 0.794830603036038, -0.0579197728903451],
            [0.155793977008544, 0.0465003943658136, -0.986694456278987],
            [-0.781561657415563, -0.605047126925823, -0.151918892362490]
        ])
        t_exp = np.array([0.368295677831339, 0.758935286322908, 2.92883210365382])

        R, t, _, _ = bgpnp.KernelPnP(Cw, K)
        self.assertTrue(np.allclose(R, R_exp, atol=1e-8))
        self.assertTrue(np.allclose(t, t_exp, atol=1e-8))

    # Test case 2
    def test_bgpnp(self):
        from bearing_only_solver import bgpnp, bearing_linear_solver, load_simulation_data
        import numpy as np
        import os
        import logging
        from math import sin, cos, tan, asin, acos, atan2, fabs, sqrt

        logging.basicConfig(format='%(asctime)s,%(msecs)03d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
            datefmt='%Y-%m-%d:%H:%M:%S',
            level=logging.INFO)
        logger = logging.getLogger(__name__)

        gpath = os.path.dirname(os.path.realpath(__file__))
        folder = os.path.join(gpath, '../taes/')
        file = 'simu_'

        files = [os.path.join(folder, f) for f in os.listdir(folder) if file in f]

        for f in files:
            data = load_simulation_data(f)
            logger.debug(data["p1"])
            logger.debug(data["p2"].shape)
            logger.debug(data["Rgt"])
            logger.debug(data["tgt"])

            uvw = data["p1"]
            xyz = data["p2"]
            bearing = data["bearing"]

            (R1, t1, _), time = bgpnp.solve(uvw.T, xyz.T, bearing.T, True)

            bearing_angle = np.zeros((2, data["bearing"].shape[1]))
            for i in range(data["bearing"].shape[1]):
                vec = data["bearing"][:, i]
                phi = asin(vec[2])
                theta = atan2(vec[1], vec[0])
                bearing_angle[:, i] = np.array([theta, phi])

            (R2, t2), time = bearing_linear_solver.solve(uvw, xyz, bearing)

            logger.info(f'R1: {R1}')
            logger.info(f'R2: {R2}')
            logger.info(f't1: {t1}')
            logger.info(f't2: {t2}')

            self.assertTrue(np.allclose(R1, R2, atol=1e-8))
            self.assertTrue(np.allclose(t1, t2, atol=1e-8))

if __name__ == '__main__':
    if __name__ == '__main__':
        unittest.main()
